/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => {
    // webpackBootstrap
    /******/ var __webpack_modules__ = {
        /***/ "./node_modules/fast-deep-equal/index.js":
            /*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
            /***/ (module) => {
                "use strict";
                eval(
                    "\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n\n//# sourceURL=webpack://cashplot/./node_modules/fast-deep-equal/index.js?",
                );

                /***/
            },

        /***/ "./node_modules/matcher/index.js":
            /*!***************************************!*\
  !*** ./node_modules/matcher/index.js ***!
  \***************************************/
            /***/ (module, __unused_webpack_exports, __webpack_require__) => {
                "use strict";
                eval(
                    "\nconst escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ \"./node_modules/matcher/node_modules/escape-string-regexp/index.js\");\n\nconst regexpCache = new Map();\n\nfunction sanitizeArray(input, inputName) {\n\tif (!Array.isArray(input)) {\n\t\tswitch (typeof input) {\n\t\t\tcase 'string':\n\t\t\t\tinput = [input];\n\t\t\t\tbreak;\n\t\t\tcase 'undefined':\n\t\t\t\tinput = [];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new TypeError(`Expected '${inputName}' to be a string or an array, but got a type of '${typeof input}'`);\n\t\t}\n\t}\n\n\treturn input.filter(string => {\n\t\tif (typeof string !== 'string') {\n\t\t\tif (typeof string === 'undefined') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthrow new TypeError(`Expected '${inputName}' to be an array of strings, but found a type of '${typeof string}' in the array`);\n\t\t}\n\n\t\treturn true;\n\t});\n}\n\nfunction makeRegexp(pattern, options) {\n\toptions = {\n\t\tcaseSensitive: false,\n\t\t...options\n\t};\n\n\tconst cacheKey = pattern + JSON.stringify(options);\n\n\tif (regexpCache.has(cacheKey)) {\n\t\treturn regexpCache.get(cacheKey);\n\t}\n\n\tconst negated = pattern[0] === '!';\n\n\tif (negated) {\n\t\tpattern = pattern.slice(1);\n\t}\n\n\tpattern = escapeStringRegexp(pattern).replace(/\\\\\\*/g, '[\\\\s\\\\S]*');\n\n\tconst regexp = new RegExp(`^${pattern}$`, options.caseSensitive ? '' : 'i');\n\tregexp.negated = negated;\n\tregexpCache.set(cacheKey, regexp);\n\n\treturn regexp;\n}\n\nmodule.exports = (inputs, patterns, options) => {\n\tinputs = sanitizeArray(inputs, 'inputs');\n\tpatterns = sanitizeArray(patterns, 'patterns');\n\n\tif (patterns.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst isFirstPatternNegated = patterns[0][0] === '!';\n\n\tpatterns = patterns.map(pattern => makeRegexp(pattern, options));\n\n\tconst result = [];\n\n\tfor (const input of inputs) {\n\t\t// If first pattern is negated we include everything to match user expectation.\n\t\tlet matches = isFirstPatternNegated;\n\n\t\tfor (const pattern of patterns) {\n\t\t\tif (pattern.test(input)) {\n\t\t\t\tmatches = !pattern.negated;\n\t\t\t}\n\t\t}\n\n\t\tif (matches) {\n\t\t\tresult.push(input);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nmodule.exports.isMatch = (inputs, patterns, options) => {\n\tinputs = sanitizeArray(inputs, 'inputs');\n\tpatterns = sanitizeArray(patterns, 'patterns');\n\n\tif (patterns.length === 0) {\n\t\treturn false;\n\t}\n\n\treturn inputs.some(input => {\n\t\treturn patterns.every(pattern => {\n\t\t\tconst regexp = makeRegexp(pattern, options);\n\t\t\tconst matches = regexp.test(input);\n\t\t\treturn regexp.negated ? !matches : matches;\n\t\t});\n\t});\n};\n\n\n//# sourceURL=webpack://cashplot/./node_modules/matcher/index.js?",
                );

                /***/
            },

        /***/ "./node_modules/matcher/node_modules/escape-string-regexp/index.js":
            /*!*************************************************************************!*\
  !*** ./node_modules/matcher/node_modules/escape-string-regexp/index.js ***!
  \*************************************************************************/
            /***/ (module) => {
                "use strict";
                eval(
                    "\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a \\unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n};\n\n\n//# sourceURL=webpack://cashplot/./node_modules/matcher/node_modules/escape-string-regexp/index.js?",
                );

                /***/
            },

        /***/ "./node_modules/nanoassert/index.js":
            /*!******************************************!*\
  !*** ./node_modules/nanoassert/index.js ***!
  \******************************************/
            /***/ (module) => {
                eval(
                    "module.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n\n\n//# sourceURL=webpack://cashplot/./node_modules/nanoassert/index.js?",
                );

                /***/
            },

        /***/ "./node_modules/papaparse/papaparse.min.js":
            /*!*************************************************!*\
  !*** ./node_modules/papaparse/papaparse.min.js ***!
  \*************************************************/
            /***/ function (module, exports) {
                eval(
                    'var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* @license\nPapa Parse\nv5.3.1\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0}(this,function s(){"use strict";var f="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=n&&/blob:/i.test((f.location||{}).protocol),a={},h=0,b={parse:function(e,t){var i=(t=t||{}).dynamicTyping||!1;M(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!M(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var r=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(i=f.URL||f.webkitURL||null,r=s.toString(),b.BLOB_URL||(b.BLOB_URL=i.createObjectURL(new Blob(["(",r,")();"],{type:"text/javascript"})))),t=new f.Worker(e);var i,r;return t.onmessage=_,t.id=h++,a[t.id]=t}();return r.userStep=t.step,r.userChunk=t.chunk,r.userComplete=t.complete,r.userError=t.error,t.step=M(t.step),t.chunk=M(t.chunk),t.complete=M(t.complete),t.error=M(t.error),delete t.worker,void r.postMessage({input:e,config:t,workerId:r.id})}var n=null;b.NODE_STREAM_INPUT,"string"==typeof e?n=t.download?new l(t):new p(t):!0===e.readable&&M(e.read)&&M(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=",",y="\\r\\n",s=\'"\',a=s+s,i=!1,r=null,o=!1;!function(){if("object"!=typeof t)return;"string"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines);"string"==typeof t.newline&&(y=t.newline);"string"==typeof t.quoteChar&&(s=t.quoteChar);"boolean"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);"boolean"==typeof t.escapeFormulae&&(o=t.escapeFormulae)}();var h=new RegExp(j(s),"g");"string"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if("object"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:"object"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error("Unable to serialize unrecognized input");function u(e,t,i){var r="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=v(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=n?e.length:t[o].length,u=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u="greedy"===i?""===t[o].join("").trim():1===t[o].length&&0===t[o][0].length),"greedy"===i&&n){for(var d=[],l=0;l<h;l++){var c=s?e[l]:l;d.push(t[o][c])}u=""===d.join("").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!f&&(r+=m);var g=n&&s?e[p]:p;r+=v(t[o][g],p)}o<t.length-1&&(!i||0<h&&!f)&&(r+=y)}}return r}function v(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);!0===o&&"string"==typeof e&&null!==e.match(/^[=+\\-@].*$/)&&(e="\'"+e);var i=e.toString().replace(h,a),r="boolean"==typeof n&&n||"function"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||" "===i.charAt(0)||" "===i.charAt(i.length-1);return r?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK="\\ufeff",b.BAD_DELIMITERS=["\\r","\\n",\'"\',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=",",b.Parser=E,b.ParserHandle=i,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!("INPUT"===d(this).prop("tagName").toUpperCase()&&"file"===d(this).attr("type").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0!==h.length){var e,t,i,r,n=h[0];if(M(o.before)){var s=o.before(n.file,n.inputElem);if("object"==typeof s){if("abort"===s.action)return e="AbortError",t=n.file,i=n.inputElem,r=s.reason,void(M(o.error)&&o.error({name:e},t,i,r));if("skip"===s.action)return void u();"object"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if("skip"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){M(a)&&a(e,n.file,n.inputElem),u()},b.parse(n.file,n.instanceConfig)}else M(o.complete)&&o.complete()}function u(){h.splice(0,1),e()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&M(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+e;this._partialLine="";var n=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=r.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(M(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!M(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){M(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var r;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),n||(r.onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)),r.open(this._config.downloadRequestBody?"POST":"GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)r.setRequestHeader(t,e[t])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;r.setRequestHeader("Range","bytes="+this._start+"-"+i)}try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf("/")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){var t=r.statusText||e;this._sendError(new Error(t))}}function c(e){var r,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),u.call(this,e);var s="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((r=new FileReader).onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var i=r.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(r.error)}}function p(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=i.substring(0,t),i=i.substring(t)):(e=i,i=""),this._finished=!i,this.parseChunk(e)}}}function g(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=v(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=v(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function i(m){var a,o,h,r=Math.pow(2,53),n=-r,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,u=/^(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))$/,t=this,i=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(M(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;i+=e.data.length,m.preview&&i>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return"greedy"===m.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function g(){if(c&&h&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to \'"+b.DefaultDelimiter+"\'"),h=!1),m.skipEmptyLines)for(var e=0;e<c.data.length;e++)y(c.data[e])&&c.data.splice(e--,1);return _()&&function(){if(!c)return;function e(e,t){M(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var i,r=m.header?{}:[];for(i=0;i<e.length;i++){var n=i,s=e[i];m.header&&(n=i>=l.length?"__parsed_extra":l[i]),m.transform&&(s=m.transform(s,n)),s=v(n,s),"__parsed_extra"===n?(r[n]=r[n]||[],r[n].push(s)):r[n]=s}return m.header&&(i>l.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+l.length+" fields but parsed "+i,f+t):i<l.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+l.length+" fields but parsed "+i,f+t)),r}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return i=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[i]&&(m.dynamicTyping[i]=m.dynamicTypingFunction(i)),!0===(m.dynamicTyping[i]||m.dynamicTyping)?"true"===t||"TRUE"===t||"false"!==t&&"FALSE"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<r)return!0}return!1}(t)?parseFloat(t):u.test(t)?new Date(t):""===t?null:t):t;var i}function k(e,t,i,r){var n={type:e,code:t,message:i};void 0!==r&&(n.row=r),c.errors.push(n)}this.parse=function(e,t,i){var r=m.quoteChar||\'"\';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var i=new RegExp(j(t)+"([^]*?)"+j(t),"gm"),r=(e=e.replace(i,"")).split("\\r"),n=e.split("\\n"),s=1<n.length&&n[0].length<r[0].length;if(1===r.length||s)return"\\n";for(var a=0,o=0;o<r.length;o++)"\\n"===r[o][0]&&a++;return a>=r.length/2?"\\r\\n":"\\r"}(e,r)),h=!1,m.delimiter)M(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,i,r,n){var s,a,o,h;n=n||[",","\\t","|",";",b.RECORD_SEP,b.UNIT_SEP];for(var u=0;u<n.length;u++){var f=n[u],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(i&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===h||h<l)&&1.99<l&&(a=d,s=f,h=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(h=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,i),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=M(m.chunk)?"":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,M(m.complete)&&m.complete(c),a=""}}function j(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,"\\\\$&")}function E(e){var S,O=(e=e||{}).delimiter,x=e.newline,I=e.comments,T=e.step,D=e.preview,A=e.fastMode,L=S=void 0===e.quoteChar?\'"\':e.quoteChar;if(void 0!==e.escapeChar&&(L=e.escapeChar),("string"!=typeof O||-1<b.BAD_DELIMITERS.indexOf(O))&&(O=","),I===O)throw new Error("Comment character same as delimiter");!0===I?I="#":("string"!=typeof I||-1<b.BAD_DELIMITERS.indexOf(I))&&(I=!1),"\\n"!==x&&"\\r"!==x&&"\\r\\n"!==x&&(x="\\n");var F=0,z=!1;this.parse=function(r,t,i){if("string"!=typeof r)throw new Error("Input must be a string");var n=r.length,e=O.length,s=x.length,a=I.length,o=M(T),h=[],u=[],f=[],d=F=0;if(!r)return C();if(A||!1!==A&&-1===r.indexOf(S)){for(var l=r.split(x),c=0;c<l.length;c++){if(f=l[c],F+=f.length,c!==l.length-1)F+=x.length;else if(i)return C();if(!I||f.substring(0,a)!==I){if(o){if(h=[],k(f.split(O)),R(),z)return C()}else k(f.split(O));if(D&&D<=c)return h=h.slice(0,D),C(!0)}}return C()}for(var p=r.indexOf(O,F),g=r.indexOf(x,F),_=new RegExp(j(L)+j(S),"g"),m=r.indexOf(S,F);;)if(r[F]!==S)if(I&&0===f.length&&r.substring(F,F+a)===I){if(-1===g)return C();F=g+s,g=r.indexOf(x,F),p=r.indexOf(O,F)}else if(-1!==p&&(p<g||-1===g))f.push(r.substring(F,p)),F=p+e,p=r.indexOf(O,F);else{if(-1===g)break;if(f.push(r.substring(F,g)),w(g+s),o&&(R(),z))return C();if(D&&h.length>=D)return C(!0)}else for(m=F,F++;;){if(-1===(m=r.indexOf(S,m+1)))return i||u.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:h.length,index:F}),E();if(m===n-1)return E(r.substring(F,m).replace(_,S));if(S!==L||r[m+1]!==L){if(S===L||0===m||r[m-1]!==L){-1!==p&&p<m+1&&(p=r.indexOf(O,m+1)),-1!==g&&g<m+1&&(g=r.indexOf(x,m+1));var y=b(-1===g?p:Math.min(p,g));if(r[m+1+y]===O){f.push(r.substring(F,m).replace(_,S)),r[F=m+1+y+e]!==S&&(m=r.indexOf(S,F)),p=r.indexOf(O,F),g=r.indexOf(x,F);break}var v=b(g);if(r.substring(m+1+v,m+1+v+s)===x){if(f.push(r.substring(F,m).replace(_,S)),w(m+1+v+s),p=r.indexOf(O,F),m=r.indexOf(S,F),o&&(R(),z))return C();if(D&&h.length>=D)return C(!0);break}u.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:h.length,index:F}),m++}}else m++}return E();function k(e){h.push(e),d=F}function b(e){var t=0;if(-1!==e){var i=r.substring(m+1,e);i&&""===i.trim()&&(t=i.length)}return t}function E(e){return i||(void 0===e&&(e=r.substring(F)),f.push(e),F=n,k(f),o&&R()),C()}function w(e){F=e,k(f),f=[],g=r.indexOf(x,F)}function C(e){return{data:h,errors:u,meta:{delimiter:O,linebreak:x,aborted:z,truncated:!!e,cursor:d+(t||0)}}}function R(){T(C()),h=[],u=[]}},this.abort=function(){z=!0},this.getCharIndex=function(){return F}}function _(e){var t=e.data,i=a[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(M(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else M(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&m(t.workerId,t.results)}function m(e,t){var i=a[e];M(i.userComplete)&&i.userComplete(t),i.terminate(),delete a[e]}function y(){throw new Error("Not implemented.")}function w(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=w(e[i]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function M(e){return"function"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if("string"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var i=b.parse(t.input,t.config);i&&f.postMessage({workerId:b.WORKER_ID,results:i,finished:!0})}}),(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(u.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(u.prototype)).constructor=g,b});\n\n//# sourceURL=webpack://cashplot/./node_modules/papaparse/papaparse.min.js?',
                );

                /***/
            },

        /***/ "./src/assets/example-parameters.json":
            /*!********************************************!*\
  !*** ./src/assets/example-parameters.json ***!
  \********************************************/
            /***/ (module) => {
                "use strict";
                eval(
                    'module.exports = JSON.parse(\'{"transactionData":"\\\\"Date\\\\";\\\\"Name / Description\\\\";\\\\"Account\\\\";\\\\"Counterparty\\\\";\\\\"Code\\\\";\\\\"Debit/credit\\\\";\\\\"Amount (EUR)\\\\";\\\\"Transaction type\\\\";\\\\"Notifications\\\\"\\\\n\\\\"20201128\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"4150\\\\";\\\\"Transfer\\\\";\\\\"Salary for November 2020\\\\"\\\\n\\\\"20201118\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20201108\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20201104\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20201103\\\\";\\\\"WalBlues Groceries Inc.\\\\";\\\\"\\\\";\\\\"NL33INGB9012841337\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - eat your veggies\\\\"\\\\n\\\\"20201102\\\\";\\\\"McIvy Car Insurance\\\\";\\\\"\\\\";\\\\"NL92INGB2930239492\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"80\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Car insurance for license plate 29-FD-VM\\\\"\\\\n\\\\"20201029\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20201028\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"4000\\\\";\\\\"Transfer\\\\";\\\\"Salary for October 2020\\\\"\\\\n\\\\"20201025\\\\";\\\\"WalBlues Groceries Inc.\\\\";\\\\"\\\\";\\\\"NL33INGB9012841337\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - eat your veggies\\\\"\\\\n\\\\"20201014\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20201008\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20201004\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20201002\\\\";\\\\"McIvy Car Insurance\\\\";\\\\"\\\\";\\\\"NL92INGB2930239492\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"80\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Car insurance for license plate 29-FD-VM\\\\"\\\\n\\\\"20200929\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200928\\\\";\\\\"WalBlues Groceries Inc.\\\\";\\\\"\\\\";\\\\"NL33INGB9012841337\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - eat your veggies\\\\"\\\\n\\\\"20200928\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"4000\\\\";\\\\"Transfer\\\\";\\\\"Salary for September 2020\\\\"\\\\n\\\\"20200911\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200908\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200905\\\\";\\\\"Hr J Doe\\\\";\\\\"\\\\";\\\\"\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"8000,00\\\\";\\\\"Online Banking\\\\";\\\\"To Orange Savings Account V12345678\\\\"\\\\n\\\\"20200904\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200902\\\\";\\\\"McIvy Car Insurance\\\\";\\\\"\\\\";\\\\"NL92INGB2930239492\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"80\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Car insurance for license plate 29-FD-VM\\\\"\\\\n\\\\"20200829\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200828\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"4000\\\\";\\\\"Transfer\\\\";\\\\"Salary for August 2020\\\\"\\\\n\\\\"20200822\\\\";\\\\"WalBlues Groceries Inc.\\\\";\\\\"\\\\";\\\\"NL33INGB9012841337\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - eat your veggies\\\\"\\\\n\\\\"20200808\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200807\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200804\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200802\\\\";\\\\"McIvy Car Insurance\\\\";\\\\"\\\\";\\\\"NL92INGB2930239492\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"80\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Car insurance for license plate 29-FD-VM\\\\"\\\\n\\\\"20200729\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200728\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for July 2020\\\\"\\\\n\\\\"20200720\\\\";\\\\"Joe Shmuck Used Cars\\\\";\\\\"\\\\";\\\\"NL01INGB9933998899\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"4000\\\\";\\\\"Online Banking\\\\";\\\\"Car purchase 29-FD-VM\\\\"\\\\n\\\\"20200719\\\\";\\\\"Hr J Doe\\\\";\\\\"\\\\";\\\\"\\\\";\\\\"GT\\\\";\\\\"Credit\\\\";\\\\"3500,00\\\\";\\\\"Online Banking\\\\";\\\\"From Orange Savings Account V12345678\\\\"\\\\n\\\\"20200708\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200705\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200704\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200629\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200628\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for June 2020\\\\"\\\\n\\\\"20200625\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200608\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200604\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200601\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200529\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200528\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for May 2020\\\\"\\\\n\\\\"20200513\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200508\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200504\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200429\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200428\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for April 2020\\\\"\\\\n\\\\"20200425\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200410\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200408\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200404\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200329\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200328\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for March 2020\\\\"\\\\n\\\\"20200321\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200308\\\\";\\\\"Internal Revenue Service\\\\";\\\\"\\\\";\\\\"NL11INGB1111111111\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"800\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Income tax for period of one month\\\\"\\\\n\\\\"20200305\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n\\\\"20200304\\\\";\\\\"Green Cross Health Insurance\\\\";\\\\"\\\\";\\\\"NL98INGB9392919089\\\\";\\\\"IC\\\\";\\\\"Debit\\\\";\\\\"120\\\\";\\\\"SEPA Direct Debit\\\\";\\\\"Health insurance premium\\\\"\\\\n\\\\"20200229\\\\";\\\\"Land Lord the Fifth\\\\";\\\\"\\\\";\\\\"NL91INGB0923094949\\\\";\\\\"GT\\\\";\\\\"Debit\\\\";\\\\"1200\\\\";\\\\"Online Banking\\\\";\\\\"Rent for one month\\\\"\\\\n\\\\"20200228\\\\";\\\\"Far Star Solutions\\\\";\\\\"\\\\";\\\\"NL77INGB2920291023\\\\";\\\\"OV\\\\";\\\\"Credit\\\\";\\\\"3500\\\\";\\\\"Transfer\\\\";\\\\"Salary for February 2020\\\\"\\\\n\\\\"20200220\\\\";\\\\"Tekso York\\\\";\\\\"\\\\";\\\\"NL20INGB6723623827\\\\";\\\\"BA\\\\";\\\\"Debit\\\\";\\\\"150\\\\";\\\\"Payment Terminal\\\\";\\\\"Card payment - see you soon\\\\"\\\\n","transactionFileName":"NL11INGB9023845839_01-02-2020_18-11-2020.csv","accounts":[{"name":"Main","startingBalance":120000,"addToNet":true},{"name":"Savings","startingBalance":1850000,"addToNet":true}],"categories":[{"name":"Savings","descriptionPattern":"Orange Savings Account V12345678","counterAccountPattern":"hr j doe"},{"name":"Salary","descriptionPattern":"Salary","counterAccountPattern":"Far Star Solutions"},{"name":"Tax","descriptionPattern":"Income tax","counterAccountPattern":"Internal Revenue Service"},{"name":"Tax","descriptionPattern":"Road tax for license plate 29-FD-VM","counterAccountPattern":"Department of Motor Vehicles"},{"name":"Insurance","descriptionPattern":"","counterAccountPattern":"McIvy Car Insurance"},{"name":"Insurance","descriptionPattern":"Health Insurance","counterAccountPattern":"NL98INGB9392919089"},{"name":"Rent","descriptionPattern":"Rent for one month","counterAccountPattern":"Land Lord the Fifth"},{"name":"Groceries","descriptionPattern":"","counterAccountPattern":"WalBlues Groceries Inc\\\\\\\\."},{"name":"Groceries","descriptionPattern":"","counterAccountPattern":"Tekso York"}]}\');\n\n//# sourceURL=webpack://cashplot/./src/assets/example-parameters.json?',
                );

                /***/
            },

        /***/ "./src/js/frontend/graph.js":
            /*!**********************************!*\
  !*** ./src/js/frontend/graph.js ***!
  \**********************************/
            /***/ (
                __unused_webpack_module,
                __webpack_exports__,
                __webpack_require__,
            ) => {
                "use strict";
                eval(
                    '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "generateGraphs": () => (/* binding */ generateGraphs),\n/* harmony export */   "resizeGraphs": () => (/* binding */ resizeGraphs)\n/* harmony export */ });\n/* harmony import */ var _lib_sources_ing_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/sources/ing.js */ "./src/js/lib/sources/ing.js");\n/* harmony import */ var _lib_transactions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/transactions.js */ "./src/js/lib/transactions.js");\n/* harmony import */ var _lib_totals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/totals.js */ "./src/js/lib/totals.js");\n/* harmony import */ var _lib_graph_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/graph-data.js */ "./src/js/lib/graph-data.js");\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/utils.js */ "./src/js/lib/utils.js");\n/** @module */\n\n\n\n\n\n\nconst GRAPH_IDS = {\n  BALANCE: "balance-graph",\n  YEAR: "yearly-totals-graph",\n  QUARTER: "quarterly-totals-graph",\n  MONTH: "monthly-totals-graph",\n  WEEK: "weekly-totals-graph",\n};\n\nconst PERIOD_FORMATS = {\n  [_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period.YEAR]: "%Y",\n  [_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period.QUARTER]: "Q%q %Y",\n  [_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period.MONTH]: "%b %Y",\n  [_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period.WEEK]: "W%V %Y",\n  [_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period.DAY]: "%b %e, %Y",\n};\n\nconst BACKGROUND_COLOR = "#242424";\nconst GRID_COLOR = "#484a49";\n\n// Options for the Plotly.JS graphs.\nconst BASE_LAYOUT_OPTIONS = {\n  margin: {\n    l: 70,\n    r: 5,\n    b: 92,\n    t: 0,\n    pad: 0,\n  },\n  font: { size: 16 },\n  paper_bgcolor: "rgba(0, 0, 0, 0)",\n  plot_bgcolor: BACKGROUND_COLOR,\n  showlegend: true,\n  legend: {\n    orientation: "h",\n    yanchor: "bottom",\n    y: 1.09,\n  },\n  yaxis: {\n    gridwidth: 1,\n    gridcolor: GRID_COLOR\n  }\n};\nconst RANGE_SELECTOR_OPTIONS = {\n  buttons: [\n    {\n      step: "month",\n      stepmode: "backward",\n      count: 1,\n      label: "1m",\n    },\n    {\n      step: "month",\n      stepmode: "backward",\n      count: 6,\n      label: "6m",\n    },\n    {\n      step: "year",\n      stepmode: "todate",\n      count: 1,\n      label: "YTD",\n    },\n    {\n      step: "year",\n      stepmode: "backward",\n      count: 1,\n      label: "1y",\n    },\n    {\n      step: "all",\n    },\n  ],\n};\n\n/**\n * Generates graphs and updates the graph elements.\n * @param {Parameters} parameters - Input data including transactions.\n */\nfunction generateGraphs(parameters) {\n  console.time("processTransactions");\n  const uncategorizedTransactions = _lib_sources_ing_js__WEBPACK_IMPORTED_MODULE_0__.INGTransaction.loadTransactions(\n    parameters.transactionData\n  ).map((tr) => tr.toTransaction());\n  const trBalances = (0,_lib_transactions_js__WEBPACK_IMPORTED_MODULE_1__.transactionBalances)(\n    uncategorizedTransactions.map((tr) => tr.categorize(parameters.categories)),\n    parameters.accounts\n  );\n  console.timeEnd("processTransactions");\n\n  const baseLayoutOptions = JSON.parse(JSON.stringify(BASE_LAYOUT_OPTIONS));\n  const rangeSelectorOptions = JSON.parse(\n    JSON.stringify(RANGE_SELECTOR_OPTIONS)\n  );\n  const rootElementStyle = window.getComputedStyle(document.documentElement);\n  baseLayoutOptions.font.color = rootElementStyle.getPropertyValue(\n    "--color-primary"\n  );\n  rangeSelectorOptions.bgcolor = rootElementStyle.getPropertyValue(\n    "--color-background-light"\n  );\n  rangeSelectorOptions.activecolor = rootElementStyle.getPropertyValue(\n    "--color-background-light-hover"\n  );\n\n  const balanceGraphLayout = Object.assign(\n    {\n      xaxis: {\n        rangeselector: rangeSelectorOptions,\n        gridwidth: 1,\n        gridcolor: GRID_COLOR\n      },\n    },\n    baseLayoutOptions\n  );\n\n  console.time("renderBalanceGraph");\n  createBalanceGraph(trBalances, balanceGraphLayout, GRAPH_IDS["BALANCE"]);\n  console.timeEnd("renderBalanceGraph");\n  for (const periodName of Object.keys(_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period)) {\n    if (GRAPH_IDS[periodName] !== undefined) {\n      console.time("render" + periodName + "Graph");\n\n      const totalsGraphLayout = Object.assign(\n        {\n          barmode: "relative",\n          xaxis: {\n            rangeselector: periodName === "YEAR" ? null : rangeSelectorOptions,\n            tickmode: "array",\n            tickformat: PERIOD_FORMATS[_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period[periodName]],\n            gridwidth: 1,\n            gridcolor: GRID_COLOR\n          },\n        },\n        baseLayoutOptions\n      );\n      createTotalsGraph(\n        trBalances,\n        _lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.Period[periodName],\n        totalsGraphLayout,\n        GRAPH_IDS[periodName]\n      );\n\n      console.timeEnd("render" + periodName + "Graph");\n    }\n  }\n}\n\n/**\n * Wrapper function around Plotly.newPlot / Plotly.react that creates a graph\n * if it doesn\'t already exist and updates it if it does.\n * @param {string} graphId - The element ID of the graph <div>.\n * @param {Object} data - The data to be plotted.\n * @param {Object} layout - Layout configuration.\n * @param {Object} config - Graph configuration.\n */\nfunction plotGraph(graphId, data, layout, config) {\n  if (document.getElementById(graphId).children.length === 0) {\n    Plotly.newPlot(graphId, data, layout, config);\n  } else {\n    Plotly.react(graphId, data, layout, config);\n  }\n}\n\n/**\n * Generates a balance graph.\n * @param {Array<TransactionBalance>} trBalances - Transactions+balances to plot.\n * @param {Object} layout - Layout configuration for the Plotly.JS graph.\n * @param {string} graphId - Id of the graph <div> element.\n */\nfunction createBalanceGraph(trBalances, layout, graphId) {\n  const x = trBalances.map((tr) => tr.transaction.date);\n\n  const data = [];\n  for (const accountName of Object.keys(trBalances[0].balances)) {\n    const y = trBalances\n      .map((tr) => tr.balances[accountName])\n      .map((amount) => amount / _lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.DECIMAL);\n\n    const trace = {\n      x: x,\n      y: y,\n      name: accountName,\n      mode: "line",\n      line: { shape: "hv" },\n      type: "scattergl",\n    };\n\n    data.push(trace);\n  }\n\n  const config = { responsive: true };\n  plotGraph(graphId, data, layout, config);\n}\n\n/**\n * Generates a totals graph.\n * @param {Array<TransactionBalance>} trBalances - Transactions+balances\n *                                                 from which to calculate the totals.\n * @param {Period} period - Period to group totals by.\n * @param {Object} layout - Layout configuration for the Plotly.JS graph.\n * @param {string} graphId - Id of the graph <div> element.\n */\nfunction createTotalsGraph(trBalances, period, layout, graphId) {\n  const [data, periods] = (0,_lib_graph_data_js__WEBPACK_IMPORTED_MODULE_3__.calculateTotals)(trBalances, period);\n  const config = { responsive: true };\n\n  const layoutWithTickvals = JSON.parse(JSON.stringify(layout));\n  layoutWithTickvals.xaxis.tickvals = periods.map((p) =>\n    (0,_lib_totals_js__WEBPACK_IMPORTED_MODULE_2__.periodHalves)(p, period)\n  );\n\n  plotGraph(graphId, data, layoutWithTickvals, config);\n}\n\n/**\n * Makes the graph elements update to the proper size.\n */\nfunction resizeGraphs() {\n  setTimeout(() => {\n    for (const graphId of Object.values(GRAPH_IDS)) {\n      Plotly.relayout(graphId, { autosize: true });\n    }\n  }, 50);\n}\n\n\n//# sourceURL=webpack://cashplot/./src/js/frontend/graph.js?',
                );

                /***/
            },

        /***/ "./src/js/frontend/index.js":
            /*!**********************************!*\
  !*** ./src/js/frontend/index.js ***!
  \**********************************/
            /***/ (
                __unused_webpack_module,
                __webpack_exports__,
                __webpack_require__,
            ) => {
                "use strict";
                eval(
                    '__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui */ "./src/js/frontend/ui.js");\n/** @module */\n\n\ndocument.addEventListener("DOMContentLoaded", _ui__WEBPACK_IMPORTED_MODULE_0__.init);\n\n\n//# sourceURL=webpack://cashplot/./src/js/frontend/index.js?',
                );

                /***/
            },

        /***/ "./src/js/frontend/ui.js":
            /*!*******************************!*\
  !*** ./src/js/frontend/ui.js ***!
  \*******************************/
            /***/ (
                __unused_webpack_module,
                __webpack_exports__,
                __webpack_require__,
            ) => {
                "use strict";
                eval(
                    '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "init": () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _assets_example_parameters_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../assets/example-parameters.json */ "./src/assets/example-parameters.json");\n/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graph */ "./src/js/frontend/graph.js");\n/* harmony import */ var _lib_parameters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/parameters.js */ "./src/js/lib/parameters.js");\n/* harmony import */ var _lib_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/utils.js */ "./src/js/lib/utils.js");\n/** @module */\n\n\n\n\n\n\nconst HIDE_NAV_PAGES = ["home"];\nconst HASH_PAGES = ["faq"];\nconst GRAPH_PAGES = ["balance", "totals"];\nconst NAV_ELEMENT = "navigation";\nconst ACCOUNT_TABLE_ELEMENT = "account-table";\nconst CATEGORY_TABLE_ELEMENT = "category-table";\nconst CATEGORY_NAMES_ELEMENT = "category-names-container";\nconst CATEGORY_NAME_ELEMENT = "category-name-input";\n\nconst WITHOUT_INPUT_NAV_LINKS = ["home", "input-transactions", "faq"];\nconst WITH_INPUT_NAV_LINKS = [\n  "home",\n  "input-transactions",\n  "input-accounts",\n  "input-categories",\n  "balance",\n  "totals",\n  "faq",\n];\n\nconst LOCALSTORAGE_PARAMETER_KEY = "parameters";\n\nlet transactionData = null;\nlet transactionFileName = null;\nlet parameters = null;\n\n/**\n * Sets the page to be visible, while hiding all others.\n * A page is an element with class .page, an id <name>-page,\n * and a separate nav element with id nav-<name>-button.\n *\n * This function also shows/hides the navigation bar depending on the page,\n * and updates the navigation links accordingly.\n *\n * @param {string} pageName - Name of the page to switch to.\n * @param {boolean} [changeHash] - Whether to change the hash of the URL if applicable.\n */\nfunction setActivePage(pageName, changeHash = true) {\n  const elements = document.querySelectorAll(".page");\n\n  let found = false;\n  for (const element of elements) {\n    if (element.id == pageName + "-page") {\n      element.classList.remove("disabled");\n      found = true;\n    } else {\n      element.classList.add("disabled");\n    }\n  }\n\n  if (!found) {\n    throw new Error("Page " + pageName + " does not exist.");\n  }\n\n  if (changeHash) {\n    if (HASH_PAGES.indexOf(pageName) >= 0) {\n      window.location.hash = "#" + pageName;\n    } else if (window.location.hash !== "") {\n      // Attempt to remove the hash part of the URL.\n      try {\n        history.replaceState(null, null, " ");\n      } catch (_e) {\n        window.location.hash = "";\n      }\n    }\n  }\n\n  if (GRAPH_PAGES.indexOf(pageName) >= 0) {\n    submitParameters();\n  }\n\n  if (HIDE_NAV_PAGES.indexOf(pageName) >= 0) {\n    document.getElementById(NAV_ELEMENT).classList.add("disabled");\n    hideStatusBar();\n  } else {\n    document.getElementById(NAV_ELEMENT).classList.remove("disabled");\n  }\n\n  updateNavLinks(pageName);\n}\n\n/**\n * Updates the navigation links to reflect whether the input has been\n * submitted, and highlights the current page.\n *\n * @param {string} pageName - Name of the current page.\n */\nfunction updateNavLinks(pageName) {\n  const shownNavLinks =\n    transactionData !== null ? WITH_INPUT_NAV_LINKS : WITHOUT_INPUT_NAV_LINKS;\n  const allNavLinks = Array.from(\n    new Set(WITH_INPUT_NAV_LINKS.concat(WITHOUT_INPUT_NAV_LINKS))\n  );\n  for (const navLink of allNavLinks) {\n    const navLinkElement = document.getElementById(\n      "nav-" + navLink + "-button"\n    );\n\n    if (shownNavLinks.indexOf(navLink) >= 0) {\n      navLinkElement.classList.remove("faded");\n    } else {\n      navLinkElement.classList.add("faded");\n    }\n\n    if (pageName !== null) {\n      if (navLink === pageName) {\n        navLinkElement.classList.add("current");\n      } else {\n        navLinkElement.classList.remove("current");\n      }\n    }\n  }\n}\n\n/**\n * Adds a new account to the accounts table.\n *\n * @param {string} name - Default account name.\n * @param {boolean} [locked] - Whether the account should not be removable.\n * @param {number} [startingBalance] - The starting balance.\n * @param {boolean} [addToNet] - Whether the account should be added to the net worth.\n */\nfunction addAccount(\n  name,\n  locked = false,\n  startingBalance = 0,\n  addToNet = true\n) {\n  const tableElement = document.getElementById(ACCOUNT_TABLE_ELEMENT);\n  const row = tableElement.children[1].insertRow(-1);\n  const nameInput = row.insertCell(-1);\n  nameInput.innerHTML = \'<input type="text" value=""></input>\';\n  nameInput.firstChild.value = name;\n  row.insertCell(-1).innerHTML =\n    \'<input type="text" value="\' +\n    (startingBalance / _lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.DECIMAL).toFixed(0.01) +\n    \'"></input>\';\n  row.insertCell(-1).innerHTML =\n    \'<input type="checkbox"\' + (addToNet ? " checked" : "") + "></input>";\n  const removeButton = row.insertCell(-1);\n  removeButton.innerHTML =\n    \'<button class="button button-small remove-row-button">Remove</button>\';\n  removeButton.firstChild.addEventListener("click", onRemoveRowButtonClicked);\n  if (locked) {\n    removeButton.firstChild.style.visibility = "hidden";\n  }\n}\n\n/**\n * Adds a new category to the list of category names.\n *\n * @param {string} name - Category name.\n */\nfunction addCategoryName(name) {\n  const containerElement = document.getElementById(CATEGORY_NAMES_ELEMENT);\n  const categoryButton = document.createElement("button");\n  categoryButton.classList.add("button", "large-button", "category-button");\n  categoryButton.innerHTML = name;\n  categoryButton.addEventListener("click", onEditCategoryButtonClicked);\n  containerElement.insertBefore(\n    categoryButton,\n    containerElement.lastElementChild\n  );\n}\n\n/**\n * Checks whether the given category already exists in the list of category names.\n *\n * @param {string} name - Category name.\n * @return {boolean} Whether the category name already exists.\n */\nfunction categoryNameExists(name) {\n  const containerElement = document.getElementById(CATEGORY_NAMES_ELEMENT);\n  return Array.from(containerElement.children).some(\n    (child) => child.textContent == name\n  );\n}\n\n/**\n * Returns the name of the currently selected category.\n *\n * @return {string} The name of the currently selected category.\n */\nfunction getCurrentCategory() {\n  const categoryNameElement = document.getElementById(CATEGORY_NAME_ELEMENT);\n  return categoryNameElement.value;\n}\n\n/**\n * Adds a new category to the categories table.\n *\n * @param {string} name - Category name.\n * @param {string} descriptionPattern - Description pattern to match.\n * @param {string} counterAccountPattern - Counter account pattern to match.\n */\nfunction addCategoryRow(\n  name,\n  descriptionPattern = "",\n  counterAccountPattern = ""\n) {\n  const tableElement = document.getElementById(CATEGORY_TABLE_ELEMENT);\n  const row = tableElement.children[1].insertRow(-1);\n  const descriptionPatternInput = row.insertCell(-1);\n  descriptionPatternInput.innerHTML = \'<input type="text" value=""></input>\';\n  descriptionPatternInput.firstChild.value = descriptionPattern;\n  const counterAccountPatternInput = row.insertCell(-1);\n  counterAccountPatternInput.innerHTML = \'<input type="text" value=""></input>\';\n  counterAccountPatternInput.firstChild.value = counterAccountPattern;\n  const removeButton = row.insertCell(-1);\n  removeButton.innerHTML =\n    \'<button class="button button-small remove-row-button">Remove</button>\';\n  removeButton.firstChild.addEventListener("click", onRemoveRowButtonClicked);\n  const nameInput = row.insertCell(-1);\n  nameInput.textContent = name;\n  nameInput.classList.add("disabled");\n\n  if (!categoryNameExists(name)) {\n    addCategoryName(name);\n  }\n}\n\n/**\n * Sets the current transaction data - showing a message of the result.\n *\n * @param {string} data - Loaded transaction data.\n * @param {string} fileName - File name to display if successful.\n */\nfunction setTransactionData(data, fileName) {\n  if (data === null && fileName === null) {\n    document.getElementById("transaction-data-ok").classList.add("disabled");\n    document.getElementById("transaction-data-error").classList.add("disabled");\n    document.getElementById("transaction-data-message").textContent =\n      "No file selected.";\n  } else {\n    let resultMessage = "";\n    let resultOk = false;\n    if (data === "") {\n      resultMessage = "File is empty.";\n      resultOk = false;\n    } else {\n      resultOk = true;\n    }\n\n    if (resultOk) {\n      resultMessage = fileName;\n      transactionData = data;\n      transactionFileName = fileName;\n      updateNavLinks("input-transactions");\n      document\n        .getElementById("transaction-data-ok")\n        .classList.remove("disabled");\n      document\n        .getElementById("transaction-data-error")\n        .classList.add("disabled");\n    } else {\n      document.getElementById("transaction-data-ok").classList.add("disabled");\n      document\n        .getElementById("transaction-data-error")\n        .classList.remove("disabled");\n    }\n    document.getElementById(\n      "transaction-data-message"\n    ).textContent = resultMessage;\n  }\n}\n\n/**\n * Reads the entered parameters from the page.\n * @return {Parameters} A Parameters instance containing the entered data.\n */\nfunction readParameters() {\n  const accounts = [];\n  const accountTableElement = document.getElementById("account-table");\n  for (const row of accountTableElement.children[1].children) {\n    // Allow commas as well as periods.\n    const startingBalance = Number(\n      row.children[1].children[0].value.replace(/\\,/g, ".")\n    );\n    accounts.push({\n      name: row.children[0].children[0].value,\n      startingBalance: Math.round(startingBalance * _lib_utils_js__WEBPACK_IMPORTED_MODULE_4__.DECIMAL),\n      addToNet: row.children[2].children[0].checked,\n    });\n  }\n\n  const categories = [];\n  const categoryTableElement = document.getElementById("category-table");\n  for (const row of categoryTableElement.children[1].children) {\n    categories.push({\n      descriptionPattern: row.children[0].children[0].value,\n      counterAccountPattern: row.children[1].children[0].value,\n      name: row.children[row.children.length - 1].textContent,\n    });\n  }\n\n  const parameters = new _lib_parameters_js__WEBPACK_IMPORTED_MODULE_3__.Parameters(\n    transactionData,\n    transactionFileName,\n    accounts,\n    categories\n  );\n\n  return parameters;\n}\n\n/**\n * Clears the parameters on the page.\n */\nfunction clearParameters() {\n  setTransactionData(null, null);\n\n  const accountTableElement = document.getElementById("account-table");\n  const categoryTableElement = document.getElementById("category-table");\n  accountTableElement.children[1].innerHTML = "";\n  categoryTableElement.children[1].innerHTML = "";\n  const categoryNamesElement = document.getElementById(CATEGORY_NAMES_ELEMENT);\n  while (categoryNamesElement.children.length > 1) {\n    categoryNamesElement.removeChild(categoryNamesElement.children[0]);\n  }\n}\n\n/**\n * Imports parameters from an export and fills in the fields.\n * @param {string} exportStr - String containing the export.\n */\nfunction importParameters(exportStr) {\n  let parameters;\n  try {\n    parameters = _lib_parameters_js__WEBPACK_IMPORTED_MODULE_3__.Parameters.import(exportStr);\n  } catch (err) {\n    document\n      .getElementById("parameters-upload-error")\n      .classList.remove("disabled");\n    document.getElementById(\n      "parameters-upload-message"\n    ).textContent = getErrorMessage(err);\n    return;\n  }\n  document.getElementById("parameters-upload-error").classList.add("disabled");\n  document.getElementById("parameters-upload-message").textContent = "";\n\n  clearParameters();\n\n  setTransactionData(\n    parameters.transactionData,\n    parameters.transactionFileName\n  );\n\n  let firstAccount = true;\n  for (const account of parameters.accounts) {\n    addAccount(\n      account.name,\n      firstAccount,\n      account.startingBalance,\n      account.addToNet\n    );\n    firstAccount = false;\n  }\n  for (const category of parameters.categories) {\n    addCategoryRow(\n      category.name,\n      category.descriptionPattern,\n      category.counterAccountPattern\n    );\n  }\n}\n\n/**\n * Callback for the "generate graphs" timeout.\n * This timeout is used to split off letting the user know that the graph is\n * being generated, from actually generating the graph (which is\n * time-intensive).\n */\nfunction onGenerateGraphsTimeout() {\n  try {\n    (0,_graph__WEBPACK_IMPORTED_MODULE_2__.generateGraphs)(parameters);\n    hideStatusBar();\n    (0,_graph__WEBPACK_IMPORTED_MODULE_2__.resizeGraphs)();\n  } catch (err) {\n    console.error(err);\n    showStatusError("Error generating graph: " + getErrorMessage(err) + ".");\n    return;\n  }\n\n  try {\n    localStorage.setItem(LOCALSTORAGE_PARAMETER_KEY, parameters.export());\n  } catch (err) {\n    console.error(err);\n    showStatusError("Error saving parameters: " + getErrorMessage(err) + ".");\n    return;\n  }\n}\n\n/**\n * Callback for the "on URL hash change" event.\n */\nfunction onHashChange() {\n  const locationHash = (window.location.hash || "").substr(1);\n  if (HASH_PAGES.indexOf(locationHash) >= 0) {\n    setActivePage(locationHash, false);\n  }\n}\n\n/* Event listener and callback code */\n\n/**\n * Initialization method to be called when the page is done loading.\n * Registers event handlers.\n */\nfunction init() {\n  window.addEventListener("hashchange", onHashChange, false);\n\n  for (const navLink of WITH_INPUT_NAV_LINKS) {\n    document\n      .getElementById("nav-" + navLink + "-button")\n      .addEventListener("click", () => setActivePage(navLink));\n  }\n  document\n    .getElementById("start-button")\n    .addEventListener("click", onStartButtonClicked);\n  document\n    .getElementById("start-demo-button")\n    .addEventListener("click", onStartDemoButtonClicked);\n  document\n    .getElementById("input-transactions-next-button")\n    .addEventListener("click", () => setActivePage("input-accounts"));\n  document\n    .getElementById("input-accounts-next-button")\n    .addEventListener("click", () => setActivePage("input-categories"));\n  document\n    .getElementById("input-categories-next-button")\n    .addEventListener("click", () => setActivePage("balance"));\n  document\n    .getElementById("add-account-button")\n    .addEventListener("click", onAddAccountButtonClicked);\n  document\n    .getElementById("add-category-name-button")\n    .addEventListener("click", onAddCategoryNameButtonClicked);\n  document\n    .getElementById("add-category-row-button")\n    .addEventListener("click", onAddCategoryRowButtonClicked);\n  document\n    .getElementById("delete-category-button")\n    .addEventListener("click", onDeleteCategoryButtonClicked);\n  document\n    .getElementById("category-overview-button")\n    .addEventListener("click", () => setActivePage("input-categories"));\n  document\n    .getElementById("category-name-input")\n    .addEventListener("change", onCategoryNameChanged);\n  document\n    .getElementById("export-parameters-button")\n    .addEventListener("click", exportParameters);\n  document\n    .getElementById("totals-select")\n    .addEventListener("change", changeTotalsGraph);\n  document\n    .getElementById("parameters-upload")\n    .addEventListener("change", onParametersUpload);\n  document\n    .getElementById("transaction-data-upload")\n    .addEventListener("change", onTransactionDataUpload);\n\n  for (const element of document.querySelectorAll(".remove-row-button")) {\n    element.addEventListener("click", onRemoveRowButtonClicked);\n  }\n\n  // Prevent form submitting (we don\'t collect any data anyway).\n  for (const element of document.querySelectorAll("form")) {\n    element.addEventListener("submit", (event) => {\n      event.preventDefault();\n      return false;\n    });\n  }\n\n  // Switch to hash page if specified in the URL.\n  onHashChange();\n}\n\n/**\n * Callback for the "start" button.\n */\nfunction onStartButtonClicked() {\n  let storedParameters = null;\n  try {\n    storedParameters = localStorage.getItem(LOCALSTORAGE_PARAMETER_KEY);\n  } catch (err) {\n    console.error(err);\n    showStatusError("Error loading parameters: " + getErrorMessage(err) + ".");\n  }\n  if (storedParameters !== null) {\n    importParameters(storedParameters);\n  } else {\n    setTransactionData(null, null);\n\n    addAccount("Main", true);\n  }\n\n  setActivePage("input-transactions");\n}\n\n/**\n * Callback for the "start demo" button.\n */\nfunction onStartDemoButtonClicked() {\n  importParameters(JSON.stringify(_assets_example_parameters_json__WEBPACK_IMPORTED_MODULE_1__));\n  setActivePage("input-transactions");\n}\n\n/**\n * Callback for any "remove row" button.\n */\nfunction onRemoveRowButtonClicked() {\n  const rowElement = this.parentNode.parentNode; // eslint-disable-line no-invalid-this\n  rowElement.parentNode.removeChild(rowElement);\n}\n\n/**\n * Callback for "add account" button.\n *\n * @param {Event} event - DOM event.\n */\nfunction onAddAccountButtonClicked() {\n  addAccount("New Account");\n}\n\n/**\n * Callback for "add category name" button.\n */\nfunction onAddCategoryNameButtonClicked() {\n  addCategoryName("New Category");\n}\n\n/**\n * Callback for "add category row" button.\n */\nfunction onAddCategoryRowButtonClicked() {\n  addCategoryRow(getCurrentCategory());\n}\n\n/**\n * Callback for "edit <...> category" button.\n */\nfunction onEditCategoryButtonClicked() {\n  const categoryName = this.textContent; // eslint-disable-line no-invalid-this\n  const categoryNameElement = document.getElementById(CATEGORY_NAME_ELEMENT);\n  categoryNameElement.value = categoryName;\n  categoryNameElement.dataset.currentName = categoryName;\n\n  const categoryTableElement = document.getElementById("category-table");\n  for (const row of categoryTableElement.children[1].children) {\n    if (row.children[row.children.length - 1].textContent == categoryName) {\n      row.classList.remove("disabled");\n    } else {\n      row.classList.add("disabled");\n    }\n  }\n\n  setActivePage("input-category-edit");\n}\n\n/**\n * Callback for "delete category" button.\n */\nfunction onDeleteCategoryButtonClicked() {\n  const categoryNameElement = document.getElementById(CATEGORY_NAME_ELEMENT);\n  const categoryName = categoryNameElement.value;\n\n  const categoryTableElement = document.getElementById("category-table");\n  let i = 0;\n\n  // Delete category row\n  while (i < categoryTableElement.children[1].children.length) {\n    const row = categoryTableElement.children[1].children[i];\n    if (row.children[row.children.length - 1].textContent == categoryName) {\n      categoryTableElement.children[1].removeChild(row);\n    } else {\n      i++;\n    }\n  }\n\n  // Delete category name\n  const categoryNamesElement = document.getElementById(CATEGORY_NAMES_ELEMENT);\n  i = 0;\n  while (i < categoryNamesElement.children.length) {\n    const categoryButtonElement = categoryNamesElement.children[i];\n    if (categoryButtonElement.textContent == categoryName) {\n      categoryNamesElement.removeChild(categoryButtonElement);\n    } else {\n      i++;\n    }\n  }\n\n  setActivePage("input-categories");\n}\n\n/**\n * Callback for when the user has finished typing in the "category name" input field.\n */\nfunction onCategoryNameChanged() {\n  const categoryNameElement = document.getElementById(CATEGORY_NAME_ELEMENT);\n  const oldName = categoryNameElement.dataset.currentName;\n  const newName = categoryNameElement.value;\n\n  if (oldName === newName) {\n    showStatusMessage(\'Category with name "\' + newName + \'" already exists.\');\n  } else {\n    const categoryTableElement = document.getElementById("category-table");\n    for (const row of categoryTableElement.children[1].children) {\n      if (row.children[row.children.length - 1].textContent == oldName) {\n        row.children[row.children.length - 1].textContent = newName;\n      }\n    }\n\n    const categoryNamesElement = document.getElementById(\n      CATEGORY_NAMES_ELEMENT\n    );\n    for (const categoryButtonElement of categoryNamesElement.children) {\n      if (categoryButtonElement.textContent == oldName) {\n        categoryButtonElement.textContent = newName;\n      }\n    }\n\n    categoryNameElement.dataset.currentName = newName;\n  }\n}\n\n/**\n * Callback for the Upload Transactions button.\n */\nfunction onTransactionDataUpload() {\n  const fileList = this.files; // eslint-disable-line no-invalid-this\n  if (fileList.length > 0) {\n    const file = fileList[0];\n    const reader = new FileReader();\n    reader.addEventListener("loadend", (event) => {\n      setTransactionData(event.target.result, file.name);\n    });\n    reader.readAsText(file);\n  }\n}\n\n/**\n * Callback for the Upload Parameters button.\n */\nfunction onParametersUpload() {\n  const fileList = this.files; // eslint-disable-line no-invalid-this\n  if (fileList.length > 0) {\n    const file = fileList[0];\n    const reader = new FileReader();\n    reader.addEventListener("loadend", (event) => {\n      importParameters(event.target.result);\n    });\n    reader.readAsText(file);\n  }\n}\n\n/**\n * Show the given message on the status bar.\n * @param {string} message - The message to be displayed.\n */\nfunction showStatusMessage(message) {\n  document.getElementById("status-bar").classList.remove("disabled");\n  document.getElementById("status-bar").classList.remove("error-bar");\n  document.getElementById("status-message").textContent = message;\n}\n\n/**\n * Show the given error message on the status bar.\n * @param {string} errorMessage - The error message to be displayed.\n */\nfunction showStatusError(errorMessage) {\n  document.getElementById("status-bar").classList.remove("disabled");\n  document.getElementById("status-bar").classList.add("error-bar");\n  document.getElementById("status-message").textContent = errorMessage;\n}\n\n/**\n * Hide the status bar.\n */\nfunction hideStatusBar() {\n  document.getElementById("status-bar").classList.add("disabled");\n}\n\n/**\n * Get a human-readable error message from the given Error.\n * @param {Error} err - The error to extract the message from.\n * @return {string} A human-readable error message.\n */\nfunction getErrorMessage(err) {\n  if (err.message) {\n    return err.message.toString();\n  } else if (err.name) {\n    if (err.name === "NS_ERROR_FILE_NO_DEVICE_SPACE") {\n      return "File error: No device space";\n    } else {\n      return err.name.toString();\n    }\n  } else {\n    return err.toString();\n  }\n}\n\n/**\n * Callback for the Create Graph button.\n * Submits the entered parameters and generates graphs.\n */\nfunction submitParameters() {\n  const inputParameters = readParameters();\n  const validateError = inputParameters.validate();\n\n  if (validateError !== null) {\n    showStatusError(validateError + ".");\n  } else {\n    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(parameters, inputParameters)) {\n      parameters = inputParameters;\n      showStatusMessage("Generating graph. This may take a while...");\n      // Give the browser some time to update the screen before generating the graph.\n      setTimeout(onGenerateGraphsTimeout, 100);\n    } else {\n      // Only resize the graphs since the inputs haven\'t changed.\n      (0,_graph__WEBPACK_IMPORTED_MODULE_2__.resizeGraphs)();\n    }\n  }\n}\n\n/**\n * Callback for the Export Parameters button.\n * If parameters are valid, exports them into a file the user can download.\n */\nfunction exportParameters() {\n  const parameters = readParameters();\n  const exportStr = parameters.export();\n  const data = new Blob([exportStr], { type: "application/json" });\n  const url = window.URL.createObjectURL(data);\n  const exportParametersLink = document.getElementById(\n    "export-parameters-link"\n  );\n  exportParametersLink.href = url;\n  exportParametersLink.download = "cashplot.json";\n  exportParametersLink.click();\n  window.URL.revokeObjectURL(url);\n}\n\n/**\n * Callback for the totals dropdown. Changes the currently displayed graph.\n * NOTE: Assumes that every totals graph element has the id\n *       <period>-totals-graph.\n */\nfunction changeTotalsGraph() {\n  const selectElement = this; // eslint-disable-line no-invalid-this\n\n  for (let i = 0; i < selectElement.options.length; i++) {\n    if (i === selectElement.selectedIndex) {\n      document\n        .getElementById(selectElement.options[i].value + "-totals-graph")\n        .classList.remove("disabled");\n    } else {\n      document\n        .getElementById(selectElement.options[i].value + "-totals-graph")\n        .classList.add("disabled");\n    }\n  }\n\n  (0,_graph__WEBPACK_IMPORTED_MODULE_2__.resizeGraphs)();\n}\n\n\n//# sourceURL=webpack://cashplot/./src/js/frontend/ui.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/graph-data.js":
            /*!**********************************!*\
  !*** ./src/js/lib/graph-data.js ***!
  \**********************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    'const { categoriesChanges, periodThirds } = __webpack_require__(/*! ./totals */ "./src/js/lib/totals.js");\nconst utils = __webpack_require__(/*! ./utils */ "./src/js/lib/utils.js");\n\nexports.calculateTotals = function (trBalances, period) {\n  const [periods, incomeChanges, expensesChanges] = categoriesChanges(\n    trBalances,\n    period\n  );\n\n  const thirdsPeriodDates = periods.map((p) => periodThirds(p, period));\n  const incomePeriodDates = thirdsPeriodDates.map((p) => p[0]);\n  const expensesPeriodDates = thirdsPeriodDates.map((p) => p[1]);\n\n  const combinedPeriods = utils.interleaveArrays(\n    incomePeriodDates,\n    expensesPeriodDates\n  );\n\n  const data = [];\n  for (const category of Object.keys(incomeChanges)) {\n    const combinedChanges = utils.interleaveArrays(\n      incomeChanges[category],\n      expensesChanges[category]\n    );\n\n    const trace = {\n      x: combinedPeriods,\n      y: combinedChanges.map((amount) => amount / utils.DECIMAL),\n      name: category,\n      type: "bar",\n    };\n\n    data.push(trace);\n  }\n\n  return [data, periods];\n};\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/graph-data.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/parameters.js":
            /*!**********************************!*\
  !*** ./src/js/lib/parameters.js ***!
  \**********************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    '/** @module */\nconst assert = __webpack_require__(/*! nanoassert */ "./node_modules/nanoassert/index.js");\n\n/**\n * Parameters holds the various inputs for generating graphs.\n */\nclass Parameters {\n  /**\n   * Creates a new Parameters instance. Performs limited data validation -\n   * things that should only catch programming mistakes or manual tampering.\n   *\n   * @param {string} transactionData\n   * @param {string} transactionFileName\n   * @param {Array} accounts - Every element must contain a name (string),\n   *                           startingBalance (number multiplied by\n   *                           utils.DECIMAL) and addToNet (boolean).\n   * @param {Array} categories - Every element must contain a name (string),\n   *                             descriptionPattern (string) and\n   *                             counterAccountPattern (string).\n   */\n  constructor(transactionData, transactionFileName, accounts, categories) {\n    assert(transactionData === null || typeof transactionData === "string");\n    assert(\n      transactionFileName === null || typeof transactionFileName === "string"\n    );\n    assert(Array.isArray(accounts));\n    assert(accounts.length >= 1);\n    for (const account of accounts) {\n      assert(typeof account === "object");\n      assert(typeof account.name === "string");\n      assert(typeof account.startingBalance === "number");\n      assert(typeof account.addToNet === "boolean");\n    }\n    assert(Array.isArray(categories));\n    assert(categories.length >= 1);\n    for (const category of categories) {\n      assert(typeof category === "object");\n      assert(typeof category.name === "string");\n      assert(typeof category.descriptionPattern === "string");\n      assert(typeof category.counterAccountPattern === "string");\n    }\n\n    this.transactionData = transactionData;\n    this.transactionFileName = transactionFileName;\n    this.accounts = accounts;\n    this.categories = categories;\n  }\n\n  /**\n   * Validates whether the parameters are correct.\n   *\n   * @return {null|string} Message explaining why validation failed,\n   *                        or null if the data is valid.\n   */\n  validate() {\n    if (typeof this.transactionData !== "string") {\n      return "Transaction data not provided";\n    }\n    if (typeof this.transactionFileName !== "string") {\n      return "Transaction file name not provided";\n    }\n    for (const account of this.accounts) {\n      if (account.name === "") {\n        return "An account name is empty";\n      }\n      if (!Number.isFinite(account.startingBalance)) {\n        return `Starting balance for account ${account.name} is not a number`;\n      }\n    }\n    for (const category of this.categories) {\n      if (category.name === "") {\n        return "A category name is empty";\n      }\n      if (\n        category.descriptionPattern === "" &&\n        category.counterAccountPattern === ""\n      ) {\n        return `No description or counter-account given for category ${category.name}`;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Exports this Parameters as a JSON string.\n   * @return {string} Exported string which can\n   *                  be loaded using load().\n   */\n  export() {\n    return JSON.stringify(this, null, 4);\n  }\n\n  /**\n   * Imports a Parameters from a JSON string.\n   * @param {string} exportString - String generated by export().\n   * @return {Parameters} The resulting Parameters.\n   */\n  static import(exportString) {\n    assert(typeof exportString === "string");\n    const parsedObject = JSON.parse(exportString);\n\n    return new Parameters(\n      parsedObject.transactionData,\n      parsedObject.transactionFileName,\n      parsedObject.accounts,\n      parsedObject.categories\n    );\n  }\n}\n\nexports.Parameters = Parameters;\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/parameters.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/sources/ing.js":
            /*!***********************************!*\
  !*** ./src/js/lib/sources/ing.js ***!
  \***********************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    '/** @module */\nconst assert = __webpack_require__(/*! nanoassert */ "./node_modules/nanoassert/index.js");\nconst Papa = __webpack_require__(/*! papaparse */ "./node_modules/papaparse/papaparse.min.js");\nconst utils = __webpack_require__(/*! ../utils */ "./src/js/lib/utils.js");\n\nconst Transaction = __webpack_require__(/*! ../transactions */ "./src/js/lib/transactions.js").Transaction;\n\n/**\n * A single ING Bank transaction.\n */\nclass INGTransaction {\n  /**\n   * Creates a new INGTransaction instance.\n   *\n   * @param {Date} date - The date on which the transaction was made.\n   * @param {string} counterName - The name of the counter-account.\n   * @param {string} account - The account on which the transaction was made.\n   * @param {string} counterAccount - The counter-account.\n   * @param {string} code - The two-letter code indicating the type of\n   *                        transaction.\n   * @param {boolean} direction - Whether the amount was sent (false) or\n   *                              received (true).\n   * @param {number} amount - The amount sent/received, multiplied by\n   *                          utils.DECIMAL.\n   * @param {string} type - Indicates the type of transaction.\n   * @param {string} description - Any additional information about the\n   *                               transaction itself.\n   * @param {string} [balanceAfter] - The balance on the account after the\n   *                                  transaction was made, multiplied by\n   *                                  utils.DECIMAL.\n   * @param {string} [tag] - Tag name.\n   */\n  constructor(\n    date,\n    counterName,\n    account,\n    counterAccount,\n    code,\n    direction,\n    amount,\n    type,\n    description,\n    balanceAfter = null,\n    tag = null\n  ) {\n    assert(utils.isValidDate(date));\n    assert(typeof counterName === "string");\n    assert(typeof account === "string");\n    assert(typeof counterAccount === "string");\n    assert(typeof code === "string");\n    assert(typeof direction === "boolean");\n    assert(Number.isFinite(amount));\n    assert(typeof type === "string");\n    assert(typeof description === "string");\n    if (balanceAfter !== null) {\n      assert(Number.isFinite(balanceAfter));\n    }\n    if (tag !== null) {\n      assert(typeof tag === "string");\n    }\n\n    this.date = date;\n    this.counterName = counterName;\n    this.account = account;\n    this.counterAccount = counterAccount;\n    this.code = code;\n    this.direction = direction;\n    this.amount = amount;\n    this.type = type;\n    this.description = description;\n    this.balanceAfter = balanceAfter;\n    this.tag = tag;\n  }\n\n  /**\n   * Converts the ING transaction to a Transaction.\n   * @return {Transaction}\n   */\n  toTransaction() {\n    return new Transaction(\n      this.date,\n      this.counterName,\n      this.counterAccount,\n      this.description,\n      this.direction ? this.amount : -this.amount\n    );\n  }\n\n  /**\n   * Loads a transaction from a parsed CSV row.\n   * @param {Array} row - Array of strings.\n   * @return {INGTransaction} - The loaded transaction.\n   */\n  static loadRow(row) {\n    const date = new Date(\n      row[0].substr(0, 4) +\n        "-" +\n        row[0].substr(4, 2) +\n        "-" +\n        row[0].substr(6, 2)\n    );\n    const counterName = row[1];\n    const account = row[2];\n    const counterAccount = row[3];\n    const code = row[4];\n    const rawDirection = row[5];\n    let direction;\n    if (rawDirection === "Credit" || rawDirection === "Bij") {\n      direction = true;\n    } else if (rawDirection === "Debit" || rawDirection === "Af") {\n      direction = false;\n    } else {\n      throw new Error(\n        "Could not determine transaction direction based on value: " +\n          rawDirection\n      );\n    }\n    const amount = Number(row[6].replace(",", ".")) * utils.DECIMAL;\n    const type = row[7];\n    const description = row[8];\n    let balanceAfter = undefined;\n    if (row[9] !== undefined) {\n      balanceAfter = Number(row[9].replace(",", ".")) * utils.DECIMAL;\n    }\n    const tag = row[10];\n\n    return new INGTransaction(\n      date,\n      counterName,\n      account,\n      counterAccount,\n      code,\n      direction,\n      amount,\n      type,\n      description,\n      balanceAfter,\n      tag\n    );\n  }\n\n  /**\n   * Loads transactions from data (coming from a transactions file).\n   * @param {string} data - Transaction data in CSV format.\n   * @return {Array<INGTransaction>} - The loaded transactions,\n   *                                   sorted by date ascending.\n   */\n  static loadTransactions(data) {\n    assert(typeof data === "string");\n    const parsed = Papa.parse(data);\n    if (parsed.errors.length !== 0) {\n      const errorsJoined = parsed.errors\n        .map((error) => JSON.stringify(error))\n        .join("\\n");\n      throw new Error(\n        "Errors while parsing transaction data:\\n" + errorsJoined\n      );\n    }\n\n    // Remove the first row (header).\n    const rows = parsed.data.slice(1);\n    const transactions = [];\n    for (const row of rows) {\n      if (row.length === 1 && row[0] === "") {\n        // Empty line.\n        continue;\n      }\n\n      transactions.push(INGTransaction.loadRow(row));\n    }\n\n    // Sort by date ascending.\n    const sortedTransactions = transactions.sort((a, b) => a.date - b.date);\n\n    return sortedTransactions;\n  }\n}\n\nexports.INGTransaction = INGTransaction;\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/sources/ing.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/totals.js":
            /*!******************************!*\
  !*** ./src/js/lib/totals.js ***!
  \******************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    '/** @module */\nconst transactions = __webpack_require__(/*! ./transactions */ "./src/js/lib/transactions.js");\nconst utils = __webpack_require__(/*! ./utils */ "./src/js/lib/utils.js");\nconst assert = __webpack_require__(/*! nanoassert */ "./node_modules/nanoassert/index.js");\n\n/** Enum denoting a span of time (YEAR/QUARTER/...). */\nexports.Period = {\n  YEAR: 1,\n  QUARTER: 2,\n  MONTH: 3,\n  WEEK: 4,\n  DAY: 5,\n};\n\n/**\n * @param {Array<TransactionBalance>} trBalances - Transactions+balances.\n * @return {Array<string>} All categories occurring in the transactions+balances.\n */\nexports.getCategories = function (trBalances) {\n  const accountNames = Object.keys(trBalances[0].balances);\n  const isNotAnAccount = (category) => accountNames.indexOf(category) === -1;\n\n  const rawCategories = trBalances.map((tr) => tr.transaction.category);\n  // Remove duplicates and account names from categories.\n  return [...new Set(rawCategories)].filter(isNotAnAccount);\n};\n\n/**\n * Calculate the date range from a year prior to the last transaction, to the last transaction.\n * @param {Array<TransactionBalance>} trBalances - Transactions+balances.\n * @return {Array.<Date, Date>} The dates.\n */\nexports.lastYearRange = function (trBalances) {\n  assert(Array.isArray(trBalances));\n  assert(trBalances.length > 0);\n  assert(\n    trBalances.every((tr) => tr instanceof transactions.TransactionBalance)\n  );\n  const untilDate = trBalances[trBalances.length - 1].transaction.date;\n  const afterDate = new Date(untilDate.valueOf());\n  afterDate.setFullYear(afterDate.getFullYear() - 1);\n  return [afterDate, untilDate];\n};\n\n/**\n * Floors the date to the first day in the given period.\n *\n * For example, given July 23rd and exports.Period.MONTH, floors it down to July 1st.\n *\n * @param {Date} date - The date.\n * @param {exports.Period} period - The period.\n * @return {Date} The floored date.\n */\nexports.floorPeriod = function (date, period) {\n  assert(date instanceof Date);\n  switch (period) {\n    case exports.Period.YEAR: {\n      return new Date(Date.UTC(date.getUTCFullYear(), 0, 1));\n    }\n    case exports.Period.QUARTER: {\n      return new Date(\n        Date.UTC(\n          date.getUTCFullYear(),\n          date.getUTCMonth() - (date.getUTCMonth() % 3),\n          1\n        )\n      );\n    }\n    case exports.Period.MONTH: {\n      return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1));\n    }\n    case exports.Period.WEEK: {\n      // https://stackoverflow.com/a/4156516\n      const d = new Date(date);\n      const day = d.getDay();\n      const diff = d.getDate() - day + (day == 0 ? -6 : 1); // Adjust when day is sunday.\n      return new Date(d.setDate(diff));\n    }\n    case exports.Period.DAY: {\n      return new Date(\n        Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate())\n      );\n    }\n    default: {\n      throw new Error("Unknown period " + period);\n    }\n  }\n};\n\n/**\n * Given a date, return the first day of the next period.\n * @param {Date} date - The date.\n * @param {exports.Period} period - The period.\n * @return {Date} The first day in the next period.\n */\nexports.nextPeriod = function (date, period) {\n  assert(date instanceof Date);\n  const floorDate = exports.floorPeriod(date, period);\n  switch (period) {\n    case exports.Period.YEAR: {\n      return new Date(\n        Date.UTC(\n          floorDate.getUTCFullYear() + 1,\n          floorDate.getUTCMonth(),\n          floorDate.getUTCDate()\n        )\n      );\n    }\n    case exports.Period.QUARTER: {\n      return new Date(\n        Date.UTC(\n          floorDate.getUTCFullYear(),\n          floorDate.getUTCMonth() + 3,\n          floorDate.getUTCDate()\n        )\n      );\n    }\n    case exports.Period.MONTH: {\n      return new Date(\n        Date.UTC(\n          floorDate.getUTCFullYear(),\n          floorDate.getUTCMonth() + 1,\n          floorDate.getUTCDate()\n        )\n      );\n    }\n    case exports.Period.WEEK: {\n      return new Date(\n        Date.UTC(\n          floorDate.getUTCFullYear(),\n          floorDate.getUTCMonth(),\n          floorDate.getUTCDate() + 7\n        )\n      );\n    }\n    case exports.Period.DAY: {\n      return new Date(\n        Date.UTC(\n          floorDate.getUTCFullYear(),\n          floorDate.getUTCMonth(),\n          floorDate.getUTCDate() + 1\n        )\n      );\n    }\n    default: {\n      throw new Error("Unknown period " + period);\n    }\n  }\n};\n\n/**\n * Given a date, return the dates of 1/3rd and 2/3rds through the period.\n * @param {Date} date - The date.\n * @param {exports.Period} period - The period.\n * @return {Array<Date>} Dates of 1/3rd and 2/3rds through the period.\n */\nexports.periodThirds = function (date, period) {\n  const fromDate = exports.floorPeriod(date, period);\n  const untilDate = exports.nextPeriod(date, period);\n\n  const oneThirdDate = new Date(\n    fromDate.getTime() + (untilDate.getTime() - fromDate.getTime()) / 3\n  );\n  const twoThirdsDate = new Date(\n    fromDate.getTime() + ((untilDate.getTime() - fromDate.getTime()) / 3) * 2\n  );\n\n  if (period == exports.Period.DAY) {\n    return [oneThirdDate, twoThirdsDate];\n  } else {\n    return [\n      new Date(\n        Date.UTC(\n          oneThirdDate.getUTCFullYear(),\n          oneThirdDate.getUTCMonth(),\n          oneThirdDate.getUTCDate()\n        )\n      ),\n      new Date(\n        Date.UTC(\n          twoThirdsDate.getUTCFullYear(),\n          twoThirdsDate.getUTCMonth(),\n          twoThirdsDate.getUTCDate()\n        )\n      ),\n    ];\n  }\n};\n\n/**\n * Given a date, return the date but half through the period.\n * @param {Date} date - The date.\n * @param {exports.Period} period - The period.\n * @return {Array<Date>} Dates half through the period.\n */\nexports.periodHalves = function (date, period) {\n  const fromDate = exports.floorPeriod(date, period);\n  const untilDate = exports.nextPeriod(date, period);\n\n  const halfDate = new Date(\n    fromDate.getTime() + (untilDate.getTime() - fromDate.getTime()) / 2\n  );\n\n  if (period == exports.Period.DAY) {\n    return halfDate;\n  } else {\n    return new Date(\n      Date.UTC(\n        halfDate.getUTCFullYear(),\n        halfDate.getUTCMonth(),\n        halfDate.getUTCDate()\n      )\n    );\n  }\n};\n\n/**\n * Calculate the period total income/expenses for each category occurring in the given transactions+balances.\n * @param {Array<TransactionBalance>} trBalances - The transactions+balances.\n * @param {exports.Period} period - The period by which to group income/expenses by.\n * @return {Array.<Array<Date>,Object<string,number>,Object<string,number>>} -\n *   An array of periods, an array of income totals and an array of expenses totals.\n */\nexports.categoriesChanges = function (trBalances, period) {\n  const categories = exports.getCategories(trBalances);\n\n  const firstPeriod = exports.floorPeriod(\n    trBalances[0].transaction.date,\n    period\n  );\n  const lastPeriod = exports.floorPeriod(\n    trBalances[trBalances.length - 1].transaction.date,\n    period\n  );\n\n  const incomeChanges = utils.fillObject(categories, [], true);\n  const expensesChanges = utils.fillObject(categories, [], true);\n\n  const periods = [];\n  let curPeriod = firstPeriod;\n\n  while (curPeriod <= lastPeriod) {\n    curIncomeChanges = utils.fillObject(categories, 0);\n    curExpensesChanges = utils.fillObject(categories, 0);\n    for (const trBalance of trBalances) {\n      const tr = trBalance.transaction;\n      if (\n        exports.floorPeriod(tr.date, period).getTime() ===\n          curPeriod.getTime() &&\n        categories.indexOf(tr.category) !== -1\n      ) {\n        if (tr.change >= 0) {\n          curIncomeChanges[tr.category] += tr.change;\n        } else {\n          curExpensesChanges[tr.category] += -tr.change;\n        }\n      }\n    }\n    for (const category of categories) {\n      incomeChanges[category].push(curIncomeChanges[category]);\n      expensesChanges[category].push(curExpensesChanges[category]);\n    }\n    periods.push(curPeriod);\n    curPeriod = exports.nextPeriod(curPeriod, period);\n  }\n\n  return [periods, incomeChanges, expensesChanges];\n};\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/totals.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/transactions.js":
            /*!************************************!*\
  !*** ./src/js/lib/transactions.js ***!
  \************************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    '/** @module */\nconst assert = __webpack_require__(/*! nanoassert */ "./node_modules/nanoassert/index.js");\nconst utils = __webpack_require__(/*! ./utils */ "./src/js/lib/utils.js");\n\nconst NET_ACCOUNT_NAME = "Net";\n\n/**\n * A single transaction. May have a category assigned.\n */\nclass Transaction {\n  /**\n   * Creates a new Transaction instance.\n   * @param {Date} date - The date on which the transaction was made.\n   * @param {string} counterName - The name of the counter-account.\n   * @param {string} counterAccount - The counter-account.\n   * @param {string} description - Any additional information about the\n   *                               transaction itself.\n   * @param {number} change - The amount that was transferred. Negative if sent\n   *                          from the main account, positive if received on\n   *                          the main account.\n   * @param {string} [category] - Category name.\n   */\n  constructor(\n    date,\n    counterName,\n    counterAccount,\n    description,\n    change,\n    category = null\n  ) {\n    assert(utils.isValidDate(date));\n    assert(typeof counterName === "string");\n    assert(typeof counterAccount === "string");\n    assert(typeof description === "string");\n    assert(Number.isFinite(change));\n    if (category !== null) {\n      assert(typeof category === "string");\n    }\n\n    this.date = date;\n    this.counterName = counterName;\n    this.counterAccount = counterAccount;\n    this.description = description;\n    this.change = change;\n    this.category = category;\n  }\n\n  /**\n   * Categorizes this transaction based on matching rules in the configuration.\n   *\n   * @param {Array<Category>} categories - Category matching rules (see Parameters).\n   * @param {string} [defaultCategory] - Category name if no rules match.\n   * @return {Transaction} The categorized transaction.\n   */\n  categorize(categories, defaultCategory = "Other") {\n    assert(Array.isArray(categories));\n    let categoryName = null;\n    for (const category of categories) {\n      if (\n        utils.match(this.description, category.descriptionPattern) &&\n        utils.match(\n          this.counterName + " " + this.counterAccount,\n          category.counterAccountPattern\n        )\n      ) {\n        categoryName = category.name;\n        break;\n      }\n    }\n\n    return new Transaction(\n      this.date,\n      this.counterName,\n      this.counterAccount,\n      this.description,\n      this.change,\n      categoryName !== null ? categoryName : defaultCategory\n    );\n  }\n}\n\n/**\n * A transaction combined with changes and balances for each account.\n */\nclass TransactionBalance {\n  /**\n   * Creates a new TransactionBalance instance.\n   * @param {Transaction} transaction - The transaction.\n   * @param {Object<number>} changes - A collection of account name => balance\n   *                                   change resulting from the transaction.\n   * @param {Object<number>} balances - A collection of account name => balance\n   *                                   resulting from the transaction.\n   */\n  constructor(transaction, changes, balances) {\n    assert(transaction instanceof Transaction);\n    assert(typeof changes === "object");\n    for (const account of Object.keys(changes)) {\n      assert(Number.isFinite(changes[account]));\n    }\n    assert(typeof balances === "object");\n    for (const account of Object.keys(balances)) {\n      assert(Number.isFinite(balances[account]));\n    }\n\n    this.transaction = transaction;\n    this.changes = changes;\n    this.balances = balances;\n  }\n}\n\n/**\n * Calculate the changes and balances for every account on each transaction.\n * In addition, accumulates the changes from the accounts marked with addToNet\n * to the "Net" account.\n *\n * @param {Array<Transaction>} transactions - The categorized transactions.\n *                                            NOTE: Has to be sorted by date\n *                                                  ascending.\n * @param {Array<Account>} accounts - The account names and parameters.\n * @return {Array<TransactionBalance>} - The calculated\n *                                       transactions+changes+balances.\n */\nexports.transactionBalances = function (transactions, accounts) {\n  assert(Array.isArray(transactions));\n  assert(Array.isArray(accounts));\n  assert(accounts.length > 0);\n\n  const mainAccountName = accounts[0].name;\n\n  /**\n   * @return {Object} An object with the keys set to the account names and values set to 0.\n   */\n  function zeroAccounts() {\n    const balances = {};\n    for (const account of accounts) {\n      balances[account.name] = 0;\n    }\n    return balances;\n  }\n\n  /**\n   * @param {string} accountName - The account name to check.\n   * @return {boolean} Whether an account doesn\'t contribute to the net total.\n   */\n  function isNetIgnoreAccount(accountName) {\n    for (const account of accounts) {\n      if (account.name === accountName && !account.addToNet) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {string} accountName - The account name to check.\n   * @return {boolean} Whether an account is a savings account (i.e. not the first account).\n   */\n  function isSavingsAccount(accountName) {\n    for (const account of accounts) {\n      if (account.name === accountName) {\n        return account.name !== mainAccountName;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {object} changes - The changes per account (account name => change objects).\n   * @return {number} The total of the changes that contribute to the net value.\n   *\n   */\n  function calculateNetChange(changes) {\n    let netChange = 0;\n    for (const accountName of Object.keys(changes)) {\n      if (!isNetIgnoreAccount(accountName)) {\n        netChange += changes[accountName];\n      }\n    }\n    return netChange;\n  }\n\n  let oldBalances = zeroAccounts();\n  for (const account of accounts) {\n    oldBalances[account.name] = account.startingBalance;\n  }\n  const trBalances = [];\n\n  for (const transaction of transactions) {\n    const changes = zeroAccounts();\n\n    changes[mainAccountName] = transaction.change;\n    if (isSavingsAccount(transaction.category)) {\n      changes[transaction.category] = -transaction.change;\n    }\n\n    const balances = zeroAccounts();\n    for (const accountName of Object.keys(oldBalances)) {\n      balances[accountName] = oldBalances[accountName] + changes[accountName];\n    }\n\n    // Deep-copy new balances to oldBalances.\n    oldBalances = JSON.parse(JSON.stringify(balances));\n\n    changes[NET_ACCOUNT_NAME] = calculateNetChange(changes);\n    balances[NET_ACCOUNT_NAME] = calculateNetChange(balances);\n\n    trBalances.push(new TransactionBalance(transaction, changes, balances));\n  }\n\n  return trBalances;\n};\n\nexports.Transaction = Transaction;\nexports.TransactionBalance = TransactionBalance;\nexports.NET_ACCOUNT_NAME = NET_ACCOUNT_NAME;\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/transactions.js?',
                );

                /***/
            },

        /***/ "./src/js/lib/utils.js":
            /*!*****************************!*\
  !*** ./src/js/lib/utils.js ***!
  \*****************************/
            /***/ (__unused_webpack_module, exports, __webpack_require__) => {
                eval(
                    '/** @module */\nconst assert = __webpack_require__(/*! nanoassert */ "./node_modules/nanoassert/index.js");\nconst matcher = __webpack_require__(/*! matcher */ "./node_modules/matcher/index.js");\n\n// Factor all input numbers should be multiplied by so they won\'t lose\n// precision due to floating point losses.\nexports.DECIMAL = 100;\n\n/**\n * Checks whether the given date is a valid Date.\n *\n * @param {string} date - Date to be checked.\n * @return {boolean} Whether the date is valid (true) or not (false).\n */\nexports.isValidDate = function (date) {\n  return !!(\n    date &&\n    Object.prototype.toString.call(date) === "[object Date]" &&\n    !isNaN(date)\n  );\n};\n\n/**\n * Checks whether the given pattern is a valid RegEx.\n *\n * @param {string} pattern - Pattern to be checked.\n * @return {boolean} Whether the pattern is valid (true) or not (false).\n */\nexports.isValidRegex = function (pattern) {\n  let valid = true;\n  try {\n    assert(typeof pattern === "string");\n    new RegExp(pattern);\n  } catch (e) {\n    valid = false;\n  }\n  return valid;\n};\n\n/**\n * Creates an object with each key set to the given value.\n *\n * @param {Array<string>} keys - The keys to set.\n * @param {any} value - The value to set to.\n * @param {boolean} [deepClone=false] - Whether to deep-clone the value for each key.\n * @return {Object} The newly created object.\n */\nexports.fillObject = function (keys, value, deepClone = false) {\n  assert(Array.isArray(keys));\n  assert(keys.every((key) => typeof key === "string"));\n\n  const object = {};\n  for (const key of keys) {\n    if (deepClone) {\n      object[key] = JSON.parse(JSON.stringify(value));\n    } else {\n      object[key] = value;\n    }\n  }\n  return object;\n};\n\n/**\n * Interleaves the values of two arrays into a new array.\n * Example: [1, 2], [3, 4] => [1, 3, 2, 4]\n *\n * @param {Array} array1 - First array.\n * @param {Array} array2 - Second array.\n * @return {Array} The interleaved array.\n */\nexports.interleaveArrays = function (array1, array2) {\n  assert(Array.isArray(array1));\n  assert(Array.isArray(array2));\n  assert(array1.length === array2.length);\n\n  return array1.map((value, idx) => [value, array2[idx]]).flat();\n};\n\n/**\n * Checks whether the given string matches a specific pattern at any position.\n * The pattern may include globs (*) or be empty (which means it will match all inputs).\n * Matching is done case-insensitive.\n * @param {string} str - The string to match.\n * @param {string} pattern - The pattern to match with.\n * @return {boolean} Whether the string matches the pattern.\n */\nexports.match = function (str, pattern) {\n  assert(typeof str === "string");\n  assert(typeof pattern === "string");\n  if (pattern === "") {\n    return true;\n  } else {\n    return matcher.isMatch(str, "*" + pattern + "*", { caseSensitive: false });\n  }\n};\n\n\n//# sourceURL=webpack://cashplot/./src/js/lib/utils.js?',
                );

                /***/
            },

        /******/
    };
    /************************************************************************/
    /******/ // The module cache
    /******/ var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/ var cachedModule = __webpack_module_cache__[moduleId];
        /******/ if (cachedModule !== undefined) {
            /******/ return cachedModule.exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/ var module = (__webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/ exports: {},
            /******/
        });
        /******/
        /******/ // Execute the module function
        /******/ __webpack_modules__[moduleId].call(
            module.exports,
            module,
            module.exports,
            __webpack_require__,
        );
        /******/
        /******/ // Return the exports of the module
        /******/ return module.exports;
        /******/
    }
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/ (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = (module) => {
            /******/ var getter =
                module && module.__esModule
                    ? /******/ () => module["default"]
                    : /******/ () => module;
            /******/ __webpack_require__.d(getter, { a: getter });
            /******/ return getter;
            /******/
        };
        /******/
    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/ (() => {
        /******/ // define getter functions for harmony exports
        /******/ __webpack_require__.d = (exports, definition) => {
            /******/ for (var key in definition) {
                /******/ if (
                    __webpack_require__.o(definition, key) &&
                    !__webpack_require__.o(exports, key)
                ) {
                    /******/ Object.defineProperty(exports, key, {
                        enumerable: true,
                        get: definition[key],
                    });
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/ (() => {
        /******/ __webpack_require__.o = (obj, prop) =>
            Object.prototype.hasOwnProperty.call(obj, prop);
        /******/
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/ (() => {
        /******/ // define __esModule on exports
        /******/ __webpack_require__.r = (exports) => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                    value: "Module",
                });
                /******/
            }
            /******/ Object.defineProperty(exports, "__esModule", {
                value: true,
            });
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module can't be inlined because the eval devtool is used.
    /******/ var __webpack_exports__ = __webpack_require__(
        "./src/js/frontend/index.js",
    );
    /******/
    /******/
})();
